@page "/Test"
@inject HttpClient Http
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;

<Row>
    <Column>
        <Card Margin="Margin.Is4.OnY">
            <CardHeader>
                <CardTitle>Data Grid</CardTitle>
            </CardHeader>
            <CardBody>
                <CardText>Combine diferent datagrid options</CardText>
            </CardBody>
            <CardBody>
                <Row>
                    <Column>
                        <Fields>
                            <Field>
                                <FieldLabel>
                                    <Tooltip Text="Defines if DataGrid can be editable.">
                                        <Icon Name="IconName.QuestionCircle" />
                                    </Tooltip>
                                </FieldLabel>
                                <FieldBody>
                                    <Check @bind-Checked="@editable">Editable</Check>
                                </FieldBody>
                            </Field>
                            <Field>
                                <FieldLabel>
                                    <Tooltip Text="Defines if DataGrid can be filtered through the column headers.">
                                        <Icon Name="IconName.QuestionCircle" />
                                    </Tooltip>
                                </FieldLabel>
                                <FieldBody>
                                    <Check @bind-Checked="@filterable">Filterable</Check>
                                </FieldBody>
                            </Field>
                        </Fields>
                    </Column>
                </Row>
                <Row>
                    <Column>
                        <Fields>
                            <Field>
                                <FieldLabel>
                                    Search
                                </FieldLabel>
                                <FieldBody>
                                    <TextEdit @bind-Text="@customFilterValue" />
                                </FieldBody>
                            </Field>
                        </Fields>
                    </Column>
                </Row>
            </CardBody>
            <CardBody>
                <DataGrid @ref="dataGrid"
                          TItem="GameInstanceModel"
                          ReadData="@(largeDataMode ? OnReadData : null)"
                          Data="@(largeDataMode ? employeeList : dataModels)"
                          TotalItems="@(largeDataMode ? totalEmployees : null)"
                          EditMode="DataGridEditMode.Popup"
                          Editable="@editable"
                          Resizable="@resizable"
                          ResizeMode="@resizableMode"
                          ShowPager="@showPager"
                          Sortable="@sortable"
                          SortMode="@sortMode"
                          SelectionMode="@selectionMode"
                          CommandMode="@commandsMode"
                          Filterable="@filterable"
                          PagerPosition="DataGridPagerPosition.TopAndBottom"
                          RowInserted="@OnRowInserted"
                          RowUpdated="@OnRowUpdated"
                          RowRemoved="@OnRowRemoved"
                          UseInternalEditing="true"
                          @bind-SelectedRow="@selectedEmployee"
                          @bind-SelectedRows="@selectedEmployees"
                          NewItemDefaultSetter="@OnEmployeeNewItemDefaultSetter"
                          Striped="true"
                          Bordered="true"
                          Hoverable="true"
                          Responsive="true"
                          ValidationsSummaryLabel="Following error occurs..."
                          CustomFilter="@OnCustomFilter">
                    <EmptyTemplate>No records...</EmptyTemplate>
                    <DataGridColumns>
                        <DataGridMultiSelectColumn TItem="GameInstanceModel" Width="30px">
                            <FilterTemplate>
                                <Button Clicked="@Reload" title="Reload">
                                    <Icon Name="IconName.Sync" />
                                </Button>
                            </FilterTemplate>
                            <MultiSelectTemplate>
                                <Label @onclick:stopPropagation>
                                    <Check TValue="bool" Checked="@context.IsSelected" Indeterminate="@context.IsIndeterminate" CheckedChanged="@context.SelectedChanged" @onclick:stopPropagation></Check>
                                </Label>
                            </MultiSelectTemplate>
                        </DataGridMultiSelectColumn>
                        <DataGridCommandColumn TItem="GameInstanceModel" EditCommandAllowed="false" DeleteCommandAllowed="false" Width="140px">
                            <NewCommandTemplate>
                                <Button Color="Color.Success" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </NewCommandTemplate>
                            <SaveCommandTemplate>
                                <Button Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </SaveCommandTemplate>
                            <CancelCommandTemplate>
                                <Button Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </CancelCommandTemplate>
                            <ClearFilterCommandTemplate>
                                <Button Color="Color.Warning" Clicked="@context.Clicked">@context.LocalizationString</Button>
                            </ClearFilterCommandTemplate>
                        </DataGridCommandColumn>
                        <DataGridColumn TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.Id )" Caption="Id" Validator="@CheckId" Editable="true">
                            <FilterTemplate>
                                <TextEdit Placeholder="Search by Id" Text="@context.SearchValue" TextChanged="@(v=> context.TriggerFilterChange(v))" />
                            </FilterTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.Game )" Caption="Game" Editable="true">
                            <CaptionTemplate>
                                <Icon Name="IconName.Gamepad" /> @context.Caption
                            </CaptionTemplate>
                            <FilterTemplate>
                                @{
                                    var selectedValue = @context.SearchValue ?? "*";
                                    <Select TValue="string" SelectedValue="@selectedValue" SelectedValueChanged="@(e => context.TriggerFilterChange(e == "*" ? "" : e.ToString()))">
                                        <SelectItem Value="@("*")">All</SelectItem>
                                        @foreach (string item in searchableGames)
                                        {
                                            <SelectItem Value="@item">@item</SelectItem>
                                        }
                                    </Select>
                                }
                            </FilterTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.Port )" Caption="Port" Editable="true" PopupFieldColumnSize="ColumnSize.IsFull.OnDesktop">
                            <FilterTemplate>
                                <TextEdit Placeholder="Search by Port" Text="@context.SearchValue" TextChanged="@(v=> context.TriggerFilterChange(v))" />
                            </FilterTemplate>
                        </DataGridColumn>
                        <DataGridColumn TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.Args )" Caption="Args" Editable="true">
                            <FilterTemplate>
                                <TextEdit Placeholder="Search by Args" Text="@context.SearchValue" TextChanged="@(v=> context.TriggerFilterChange(v))" />
                            </FilterTemplate>
                        </DataGridColumn>
                    </DataGridColumns>
                    <PopupTitleTemplate>
                        @if (context.EditState == DataGridEditState.Edit)
                        {
                            @($"{context.LocalizationString} Game Instance {context.Item.Id} {context.Item.Game}")
                        }
                        else
                        {
                            @($"{context.LocalizationString} Game Instance")
                        }
                    </PopupTitleTemplate>
                    <EmptyCellTemplate>
                        <Text Style="opacity: .5;">--</Text>
                    </EmptyCellTemplate>
                </DataGrid>
            </CardBody>
        </Card>
    </Column>
</Row>
@*<Row>
    <Column>
        <Card>
            <CardHeader>
                <CardTitle>Selected Employee</CardTitle>
            </CardHeader>
            <CardBody>
                <Fields>
                    <Field>
                        <FieldLabel>Id</FieldLabel>
                        <FieldBody>
                            <NumericEdit ReadOnly="true" Value="@selectedEmployee?.Id"></NumericEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Game</FieldLabel>
                        <Select TValue="int" Placeholder="SelectOne">
                            @{
                                var gameNamesArr = Enum.GetNames(typeof(MWFModelsLibrary.Enums.Game));
                                int enumSize = gameNamesArr.Length;

                                Console.WriteLine("names arr length = " + gameNamesArr.Length);
                                for (int i = 0; i < enumSize - 1; i++)
                                {
                                    Console.WriteLine("i = " + i);
                                    <SelectItem Value=2>@gameNamesArr[i]</SelectItem>
                                }
                            }
                        </Select>
                    </Field>
                </Fields>
                <Fields>
                    <Field>
                        <FieldLabel>Port</FieldLabel>
                        <FieldBody>
                            <TextEdit ReadOnly="true" Text="@selectedEmployee?.Port"></TextEdit>
                        </FieldBody>
                    </Field>
                    <Field>
                        <FieldLabel>Args</FieldLabel>
                        <TextEdit ReadOnly="true" Text="@selectedEmployee?.Args"></TextEdit>
                    </Field>
                </Fields>
            </CardBody>
        </Card>
    </Column>
</Row>*@

@if (selectionMode == DataGridSelectionMode.Multiple && selectedEmployees?.Count > 0)
{
    <Heading Size="HeadingSize.Is2" Margin="Margin.Is2">Multiple Employees</Heading>
    @foreach (var employee in selectedEmployees)
    {
        <Row @key="employee" Margin="Margin.Is1.FromTop">
            <Column>
                <Card>
                    <CardHeader>
                        <CardTitle>Selected Employee</CardTitle>
                    </CardHeader>
                    <CardBody>
                        <Fields>
                            <Field>
                                <FieldLabel>Id</FieldLabel>
                                <FieldBody>
                                    <NumericEdit ReadOnly="true" Value="@selectedEmployee?.Id"></NumericEdit>
                                </FieldBody>
                            </Field>
                            <FieldLabel>Game</FieldLabel>
                            <Select TValue="int" Placeholder="SelectOne">
                                @{
                                    var gameNamesArr = Enum.GetNames(typeof(MWFModelsLibrary.Enums.Game));
                                    int enumSize = gameNamesArr.Length;

                                    Console.WriteLine("names arr length = " + gameNamesArr.Length);
                                    for (int i = 0; i < enumSize - 1; i++)
                                    {
                                        Console.WriteLine("i = " + i);
                                        <SelectItem Value=2>@gameNamesArr[i]</SelectItem>
                                    }
                                }
                            </Select>
                        </Fields>
                        <Fields>
                            <Field>
                                <FieldLabel>Port</FieldLabel>
                                <FieldBody>
                                    <TextEdit ReadOnly="true" Text="@employee?.Port"></TextEdit>
                                </FieldBody>
                            </Field>
                            <Field>
                                <FieldLabel>Args</FieldLabel>
                                <TextEdit ReadOnly="true" Text="@employee?.Args"></TextEdit>
                            </Field>
                        </Fields>
                    </CardBody>
                </Card>
            </Column>
        </Row>
    }
}



@code
{
    /*
    FirstName-> Id
    LastName -> Game
    Email	 -> Port
    City	 -> Args
    */
    #region Members

    DataGridSortMode sortMode = DataGridSortMode.Multiple;
    DataGridSelectionMode selectionMode = DataGridSelectionMode.Single;
    DataGridCommandMode commandsMode = DataGridCommandMode.Commands;
    DataGridResizeMode resizableMode = DataGridResizeMode.Header;

    DataGrid<GameInstanceModel> dataGrid;

    bool showPager = false;
    bool editable = true;
    bool resizable = true;
    bool sortable = true;
    bool filterable = true;
    bool largeDataMode = false;

    GameInstanceModel selectedEmployee;
    List<GameInstanceModel> selectedEmployees;

    List<GameInstanceModel> employeeList;
    int totalEmployees;

    Random random = new Random();

    List<string> searchableGames = new List<string>();
    List<GameInstanceModel> dataModels = new List<GameInstanceModel>();

    #endregion

    #region Methods
    protected override async Task OnInitializedAsync()
    {
        IEnumerable<GameInstanceModel> response = await Http.GetFromJsonAsync<IEnumerable<GameInstanceModel>>(@"http://localhost:7071/api/GetGameInstances");

        dataModels = response.ToList(); // an actual data for the current page
        totalEmployees = dataModels.Count; // this is used to tell datagrid how many items are available so that pagination will work


        foreach (GameInstanceModel item in dataModels)
        {
            string gameName = item.Game.ToString();
            if (searchableGames.Contains(gameName) == false)
            {
                searchableGames.Add(gameName);
            }
        }


        // always call StateHasChanged!
        await InvokeAsync(StateHasChanged);
    }


    public void CheckPort(ValidatorEventArgs validationArgs)
    {
        ValidationRule.IsNotEmpty(validationArgs);

        if (validationArgs.Status == ValidationStatus.Error)
        {
            validationArgs.ErrorText = "Port has to be provided";
        }
    }

    public void CheckId(ValidatorEventArgs validationArgs)
    {
        ValidationRule.IsNotEmpty(validationArgs);

        if (validationArgs.Status == ValidationStatus.Error)
        {
            validationArgs.ErrorText = "Id has to be provided";
        }
    }

    void OnEmployeeNewItemDefaultSetter(GameInstanceModel employee)
    {
        employee.Id = 0;
    }

    void OnRowInserted(SavedRowItem<GameInstanceModel, Dictionary<string, object>> e)
    {
        var employee = e.Item;

        employee.Id = dataModels?.Max( x => x.Id ) + 1 ?? 1;

        dataModels.Add( employee );
    }

    void OnRowUpdated(SavedRowItem<GameInstanceModel, Dictionary<string, object>> e)
    {
        var employee = e.Item;

        employee.Id = (int)e.Values["Id"];
        employee.Game = (MWFModelsLibrary.Enums.Game)e.Values["Game"];
        employee.Port = (string)e.Values["Port"];
        employee.Args = (string)e.Values["Args"];
    }

    void OnRowRemoved(GameInstanceModel model)
    {
        if ( dataModels.Contains( model ) )
        {
            dataModels.Remove( model );
        }
    }

    string customFilterValue;

    bool OnCustomFilter(GameInstanceModel model)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return
            model.Id.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Game.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Port?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    async Task OnReadData(DataGridReadDataEventArgs<GameInstanceModel> e)
    {
        await Task.Delay(random.Next(800));
        if (!e.CancellationToken.IsCancellationRequested)
        {
            IEnumerable<GameInstanceModel> response = await Http.GetFromJsonAsync<IEnumerable<GameInstanceModel>>(@"http://localhost:7071/api/GetGameInstances");

            employeeList = new List<GameInstanceModel>(response); // an actual data for the current page
            totalEmployees = dataModels.Count; // this is used to tell datagrid how many items are available so that pagination will work


            foreach (GameInstanceModel item in employeeList)
            {
                string gameName = item.Game.ToString();
                if (searchableGames.Contains(gameName) == false)
                {
                    searchableGames.Add(gameName);
                }
            }


            // always call StateHasChanged!
            await InvokeAsync(StateHasChanged);
        }
    }

    Task Reload()
    {
        return dataGrid.Reload();
    }

    #endregion
}


