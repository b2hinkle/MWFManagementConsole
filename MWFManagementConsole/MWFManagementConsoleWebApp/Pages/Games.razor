@page "/Games"
@inject HttpClient Http

<h3>Games</h3>

@*<div class="col-md-3">*@
    <DataGrid TItem="GameInstanceModel"
              Data="@gameInstanceList"
              ReadData="@OnReadData"
              TotalItems="@totalGameInstances">
        <DataGridCommandColumn TItem="GameInstanceModel" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Id)" Caption="Id" Sortable="false" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Game)" Caption="Game" Editable="true" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Args)" Caption="Args" Editable="true" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.AssociatedHost)" Caption="AssociatedHost" Editable="true" />
    </DataGrid>
@*</div>*@



@code 
{
    GameInstanceModel[] gameInstanceList;
    int totalGameInstances;

    async Task OnReadData(DataGridReadDataEventArgs<GameInstanceModel> e)
    {
        // this can be call to anything, in this case we're calling a fictional api
        var response = await Http.GetFromJsonAsync<GameInstanceModel[]>($"some-api/employees?page={e.Page}&pageSize={e.PageSize}");

        gameInstanceList = response; // an actual data for the current page
        totalGameInstances = response.Length; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();
    }
}
