@page "/Games"
@inject HttpClient Http
@using System.Text.Json



<CardBody>
    <Row>
        <Column>
            <h3>Game Instances</h3>
            <Fields>
                <Field>
                    <FieldBody>
                        <Inline>
                            <Button Color="Color.Primary" Clicked="@ReloadTable" Disabled="RefreshButtonDisabed">Refresh</Button>
                            <TextEdit @bind-Text="@customFilterValue" Placeholder="Search" />
                        </Inline>
                    </FieldBody>
                </Field>
            </Fields>
            <DataGrid TItem="GameInstanceModel"
                      @ref="dataGrid"
                      Data="@dataModels"
                      SortMode="DataGridSortMode.Multiple"
                      Striped="true"
                      Bordered="true"
                      Hoverable="true"
                      Filterable="true"
                      PageSize="@pageSize"
                      ShowPager="@true"
                      CustomFilter="@OnCustomFilter">
                <DataGridColumns>
                    <DataGridCommandColumn TItem="GameInstanceModel" EditCommandAllowed="false" DeleteCommandAllowed="false" Width="140px">
                        <NewCommandTemplate>
                            <Button Color="Color.Success" Clicked="@context.Clicked">@context.LocalizationString</Button>
                        </NewCommandTemplate>
                        <SaveCommandTemplate>
                            <Button Color="Color.Primary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                        </SaveCommandTemplate>
                        <CancelCommandTemplate>
                            <Button Color="Color.Secondary" Clicked="@context.Clicked">@context.LocalizationString</Button>
                        </CancelCommandTemplate>
                        <ClearFilterCommandTemplate>
                            <Button Color="Color.Warning" Clicked="@context.Clicked">@context.LocalizationString</Button>
                        </ClearFilterCommandTemplate>
                    </DataGridCommandColumn>

                    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Id)" Caption="Id" Editable="true">
                        <FilterTemplate>
                            <TextEdit Placeholder="Search by Id" Text="@context.SearchValue" TextChanged="@(v => context.TriggerFilterChange(v))" />
                        </FilterTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Game)" Caption="Game" Editable="true">
                        <CaptionTemplate>
                            <Icon Name="IconName.Gamepad" /> @context.Caption
                        </CaptionTemplate>
                        <FilterTemplate>
                            @{
                                var selectedValue = @context.SearchValue ?? "*";
                                <Select TValue="string" SelectedValue="@selectedValue" SelectedValueChanged="@(e => context.TriggerFilterChange(e == "*" ? "" : e.ToString()))">
                                    <SelectItem Value="@("*")">All</SelectItem>
                                    @foreach (string item in searchableGames)
                                    {
                                        <SelectItem Value="@item">@item</SelectItem>
                                    }
                                </Select>
                            }
                        </FilterTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Port)" Caption="Port" Editable="true" PopupFieldColumnSize="ColumnSize.IsFull.OnDesktop">
                        <FilterTemplate>
                            <TextEdit Placeholder="Search by Port" Text="@context.SearchValue" TextChanged="@(v => context.TriggerFilterChange(v))" />
                        </FilterTemplate>
                    </DataGridColumn>
                    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Args)" Caption="Args" Editable="true">
                        <FilterTemplate>
                            <TextEdit Placeholder="Search by Args" Text="@context.SearchValue" TextChanged="@(v => context.TriggerFilterChange(v))" />
                        </FilterTemplate>
                    </DataGridColumn>
                </DataGridColumns>
            </DataGrid>

        </Column>
    </Row>
</CardBody>


<Card>
    <CardHeader>
        <CardTitle>Create New Game Instance</CardTitle>
    </CardHeader>
    <CardBody>
        @*Non Blazorise form*@
        <EditForm EditContext="AddGIFormContext" OnValidSubmit="CreateNewGameInstance">
            <div class="form-group">
                <label>Game</label>
                <InputSelect @bind-Value="NewGameInstanceToAdd.Game" class="form-control">
                    @foreach (var game in Enum.GetValues(typeof(MWFModelsLibrary.Enums.Game)))
                    {
                        <option>@game.ToString()</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label>Port</label>
                <InputText @bind-Value="NewGameInstanceToAdd.Port" class="form-control" />
            </div>
            <div class="form-group">
                <label>Args</label>
                <InputText @bind-Value="NewGameInstanceToAdd.Args" class="form-control" />
            </div>
            <div class="form-group">
                <label>HostId</label>
                <InputNumber @bind-Value="NewGameInstanceToAdd.HostId" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary" disabled=@isSubmitting>Create</button>
        </EditForm>

    </CardBody>
</Card>



<Snackbar @ref="snackbarSuccess" Color="SnackbarColor.Success">
    <SnackbarBody>
        New game instance running
        <SnackbarAction Clicked="@(() => snackbarSuccess.Hide())">CLOSE</SnackbarAction>
    </SnackbarBody>
</Snackbar>
<Snackbar @ref="snackbarFailure" Color="SnackbarColor.Danger">
    <SnackbarBody>
        Failed to create and run new game instance
        <SnackbarAction Clicked="@(() => snackbarFailure.Hide())">CLOSE</SnackbarAction>
    </SnackbarBody>
</Snackbar>


@code
{
    public EditContext AddGIFormContext { get; set; }


    int pageSize = 50;
    bool isSubmitting;
    bool RefreshButtonDisabed;
    Snackbar snackbarSuccess;
    Snackbar snackbarFailure;

    DataGrid<GameInstanceModel> dataGrid;
    List<GameInstanceModel> dataModels;
    List<string> searchableGames = new List<string>();
    GameInstanceModel NewGameInstanceToAdd = new GameInstanceModel();

    protected override async Task OnInitializedAsync()
    {
        // Set the form edit context with your model. 
        AddGIFormContext = new EditContext(NewGameInstanceToAdd);
        await ReloadTable();
    }

    string customFilterValue;
    bool OnCustomFilter(GameInstanceModel model)
    {
        if (string.IsNullOrEmpty(customFilterValue))
            return true;

        return
            model.Id.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Game.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Args.ToString()?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true
            || model.Port?.Contains(customFilterValue, StringComparison.OrdinalIgnoreCase) == true;
    }

    async Task CreateNewGameInstance()
    {
        snackbarSuccess.Hide();
        snackbarFailure.Hide();
        isSubmitting = true;
        var result = await Http.PostAsJsonAsync<GameInstanceModel>(@"http://localhost:7071/api/CreateGameInstanceAndReturnId", (GameInstanceModel)AddGIFormContext.Model, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        isSubmitting = false;
        if (result.IsSuccessStatusCode)
        {
            snackbarSuccess.Show();
            await ReloadTable();    // Fetch the new table data and display it
        }
        else
        {
            snackbarFailure.Show();
        }

        // Refresh the Editcontext so validator outlines go away
        AddGIFormContext = new EditContext(NewGameInstanceToAdd);
    }

    async Task ReloadTable()
    {
        RefreshButtonDisabed = true;
        // Update our GameInstances list
        IEnumerable<GameInstanceModel> response = await Http.GetFromJsonAsync<IEnumerable<GameInstanceModel>>(@"http://localhost:7071/api/GetGameInstances");
        dataModels = new List<GameInstanceModel>(response);


        // Make sure we have all the games that are currently running. This list is used for the filter dropdown
        searchableGames.Clear();
        foreach (GameInstanceModel item in dataModels)
        {
            string gameName = item.Game.ToString();
            if (searchableGames.Contains(gameName) == false)
            {
                searchableGames.Add(gameName);
            }
        }


        // always call StateHasChanged!
        StateHasChanged();
        RefreshButtonDisabed = false;
    }

}

