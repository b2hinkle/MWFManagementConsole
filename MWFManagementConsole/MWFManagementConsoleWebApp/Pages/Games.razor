@page "/Games"
@inject HttpClient Http

<h3>Games</h3>

<DataGrid TItem="GameInstanceModel"
          Data="@gameInstanceArr"
          ReadData="@OnReadData"
          TotalItems="@totalGameInstances">
    <DataGridCommandColumn TItem="GameInstanceModel" />
    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Id)" Caption="Id" Sortable="false" />
    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Game)" Caption="Game" Editable="true" />
    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Port)" Caption="Port" Editable="true" />
    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Args)" Caption="Args" Editable="true" />
    <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.HostId)" Caption="HostId" Editable="true" />
</DataGrid>



@code
{
    GameInstanceModel[] gameInstanceArr;
    int totalGameInstances;

    async Task OnReadData(DataGridReadDataEventArgs<GameInstanceModel> e)
    {
        IEnumerable<GameInstanceModel> response = await Http.GetFromJsonAsync<IEnumerable<GameInstanceModel>>(@"http://localhost:7071/api/GetGameInstances");

        gameInstanceArr = response.ToArray(); // an actual data for the current page
        totalGameInstances = gameInstanceArr.Length; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();
    }
}
