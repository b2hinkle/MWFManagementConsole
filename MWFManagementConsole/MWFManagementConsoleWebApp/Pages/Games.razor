@page "/Games"
@inject HttpClient Http
@using System.Text.Json



@*<h3>Game Instances</h3>
@if (gameInstanceArr == null)
{
    <p>Fetching data....</p>
}*@



<DataGrid TItem="GameInstanceModel"
          @ref="dataGrid"
          Data="@gameInstanceArr"
          ReadData="@OnReadData"
          SortMode="DataGridSortMode.Multiple"
          Striped="true"
          Bordered="true"
          Hoverable="true"
          TotalItems="@totalGameInstances">
    <DataGridColumns>
        <DataGridColumn TextAlignment="TextAlignment.Center" TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.Id )" Caption="Id"/>
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.Game )" Caption="Game" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.Port )" Caption="Port" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.Args )" Caption="Args" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof( GameInstanceModel.HostId )" Caption="HostId" />
    </DataGridColumns>
</DataGrid>


@*<DataGrid TItem="GameInstanceModel"
          Data="@gameInstanceArr"
          ReadData="@OnReadData"
          TotalItems="@totalGameInstances">
    <DataGridCommandColumn TItem="GameInstanceModel" />
    @if (gameInstanceArr != null)
    {
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Id)" Caption="Id" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Game)" Caption="Game" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Port)" Caption="Port" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.Args)" Caption="Args" />
        <DataGridColumn TItem="GameInstanceModel" Field="@nameof(GameInstanceModel.HostId)" Caption="HostId" />
    }
</DataGrid>*@

@*Blazorise Form*@
@*<h3>Create Game Instance</h3>
    <Fields>
        <Field ColumnSize="ColumnSize.Is4.OnDesktop">
            <FieldLabel>Game</FieldLabel>
            <Select TValue="int" Placeholder="SelectOne">
                @{
                    var gameNamesArr = Enum.GetNames(typeof(MWFModelsLibrary.Enums.Game));
                    int enumSize = gameNamesArr.Length;

                    Console.WriteLine("names arr length = " + gameNamesArr.Length);
                    for (int i = 0; i < enumSize; i++)
                    {
                        Console.WriteLine("i = " + i);
                        <SelectItem Value=2>@gameNamesArr[i]</SelectItem>
                    }
                }
            </Select>
        </Field>
        <Field ColumnSize="ColumnSize.Is6.OnDesktop">
            <FieldLabel>HostId</FieldLabel>
            <TextEdit />
        </Field>
        <Field ColumnSize="ColumnSize.Is2.OnDesktop">
            <FieldLabel>Args</FieldLabel>
            <TextEdit />
        </Field>
    </Fields>*@


<Card>
    <CardHeader>
        <CardTitle>Create New Game Instance</CardTitle>
    </CardHeader>
    <CardBody>
        @*Non Blazorise form*@
        <EditForm Model="@NewGameInstanceToAdd" OnValidSubmit="CreateNewGameInstance">
            <div class="form-group">
                <label>Game</label>
                <InputSelect @bind-Value="NewGameInstanceToAdd.Game" class="form-control">
                    @foreach (var game in Enum.GetValues(typeof(MWFModelsLibrary.Enums.Game)))
                    {
                        <option>@game.ToString()</option>
                    }
                </InputSelect>
            </div>
            <div class="form-group">
                <label>Args</label>
                <InputText @bind-Value="NewGameInstanceToAdd.Args" class="form-control" />
            </div>
            <div class="form-group">
                <label>HostId</label>
                <InputNumber @bind-Value="NewGameInstanceToAdd.HostId" class="form-control" />
            </div>
            <button type="submit" class="btn btn-primary" disabled=@isSubmitting>Create</button>
        </EditForm>

    </CardBody>
</Card>



<Snackbar @ref="snackbarSuccess" Color="SnackbarColor.Success">
    <SnackbarBody>
        New game instance running
        <SnackbarAction Clicked="@(()=>snackbarSuccess.Hide())">CLOSE</SnackbarAction>
    </SnackbarBody>
</Snackbar>
<Snackbar @ref="snackbarFailure" Color="SnackbarColor.Danger">
    <SnackbarBody>
        Failed to create and run new game instance
        <SnackbarAction Clicked="@(()=>snackbarFailure.Hide())">CLOSE</SnackbarAction>
    </SnackbarBody>
</Snackbar>


@code
{
    bool isSubmitting;
    Snackbar snackbarSuccess;
    Snackbar snackbarFailure;

    DataGrid<GameInstanceModel> dataGrid;

    protected override async Task OnInitializedAsync()
    {
        @*IEnumerable <GameInstanceModel> response = await Http.GetFromJsonAsync<IEnumerable<GameInstanceModel>>(@"Get Hosts Endpoint");*@
    }

    GameInstanceModel NewGameInstanceToAdd = new GameInstanceModel();
    async Task CreateNewGameInstance()
    {
        snackbarSuccess.Hide();
        snackbarFailure.Hide();
        isSubmitting = true;
        var result = await Http.PostAsJsonAsync<GameInstanceModel>(@"http://localhost:7071/api/CreateGameInstanceAndReturnId", NewGameInstanceToAdd, new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });
        isSubmitting = false;
        if (result.IsSuccessStatusCode)
        {
            snackbarSuccess.Show();
        }
        else
        {
            snackbarFailure.Show();
        }
    }

    GameInstanceModel[] gameInstanceArr;
    int totalGameInstances;
    async Task OnReadData(DataGridReadDataEventArgs<GameInstanceModel> e)
    {
        IEnumerable<GameInstanceModel> response = await Http.GetFromJsonAsync<IEnumerable<GameInstanceModel>>(@"http://localhost:7071/api/GetGameInstances");

        gameInstanceArr = response.ToArray(); // an actual data for the current page
        totalGameInstances = gameInstanceArr.Length; // this is used to tell datagrid how many items are available so that pagination will work

        // always call StateHasChanged!
        StateHasChanged();
    }

    Task Reload()
    {
        return dataGrid.Reload();
    }
}
